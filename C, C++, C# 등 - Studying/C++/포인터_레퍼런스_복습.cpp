#include <iostream>


/*포인터가 무엇인가 ? 왜 쓰는가 ?
	정의: 어떠한 값을 저장하는게 아닌 어떠한 값의 주소를 저장하는 것이다.

	왜 쓰는가 ? : 포인터와 주소 연산자를 사용하면 변수의 주소에 있는 값을 변경할 수 있다.
	매개변수로 포인터를 넘겨주면 포인터가 가리키는 변수, 즉 원본을 변경할 수 있는 것이다!*/


//화씨 온도를 입력받아 섭씨 단위로 바꿔준다. 매개변수 값을 받음.
void ToCelsius(float F)
{
	F = (F - 32) / 1.8;
}

//화씨 온도를 입력받아 섭씨 단위로 바꿔준다. 매개변수 Pointer로 받음
void ToCelsius_Ptr(float* F)
{
	*F = (*F - 32) / 1.8;  //매개변수를 주소로 받았기 때문에, 원본에 접근하여 데이터를 변경시킨 것.
}

//화씨 온도를 입력받아 섭씨 단위로 바꿔준다.매개변수 Reference사용
void ToCelsius_Ref(float& ref)
{
	ref = (ref - 32) / 1.8; //참조자로 받은 경우..
}


void main()
{
	//섭씨와 화씨로 예를 들어보자.
	float Temperature = 32; //화씨 32도

	//매개 변수를 주소가 아닌 값으로 넘긴 경우.
	ToCelsius(Temperature); // 화씨 32도가 섭씨 0도로 바꾸는 과정.(값을 넘김)

	std::cout << Temperature << std::endl; // 0도로 바뀌지 않고 32도로 나온다. 
	//매개변수를 주소가 아닌 값으로 받았기 때문에, 32라는 값이 복사되어 함수로 넘겨진다.
	//복사되어 넘겨졌기 때문에, 함수 내에선 아무리 변경해도 원본에 영향을 미치지 않은 것.

	//포인터(주소)를 매개변수로 넘긴 경우.
	ToCelsius_Ptr(&Temperature); // 화씨 32도가 섭씨 0도로 바꾸는 과정.(주소를 넘김)

	std::cout << Temperature << std::endl;// 0도로 바뀌어 출력이 된다.
	//매개변수를 주소로 받았기 때문에, 원본에 접근하여 데이터를 변경시킨 것.

	Temperature = 32;//다시 32도로 설정
	std::cout << Temperature << std::endl;//출력하면 32도로 나온다.


	//참조자를 사용한 경우.
	ToCelsius_Ref(Temperature);//C++문법 Reference(참조자)

	std::cout << Temperature << std::endl;// 0도로 나온다



	/*포인터와 레퍼런스는 동일하게 처리되는데 레퍼런스가 등장한 이유는 무엇인가 ?

		포인터의 위험성 2가지를 살펴보자.

		1.기본적으로 포인터는 주소를 가리키지만 널을 가리킬 수도 있다.(초기화 안해주면 쓰레기값 있음.)
		유효하지 않는 공간을 가리키게 되면 에러를 발생시키며 프로그램에 문제를 줄 수 있다.

		2.인자에 주소를 담아 call by address로 함수를 호출했다고 가정하면,
		호출된 함수에선 포인터를 통해 주소가 가리키는 값에 접근할 수 있다.
		즉, 포인터를 통해 할당되지 않은 메모리 공간 또는 다른 용도로 사용되고 있는 메모리 공간에 임의로 접근할 수 있다는 의미이다.
		100번지에 절대 없어지면 안되는 값을 저장해놨는데 포인터를 통해 실수로 100번지의 값을 건드릴 수 있다는 얘기이다.

		포인터를 위험하게 사용하는 경우가 많기 때문에 안전하게 사용할 수 있도록 만든 개념이다.
		
		
		포인터와 레퍼런스(참조자) 차이
		
		1.포인터는 null초기화가능,레퍼런스 null초기화 불가능(선언과 동시에 초기화를 해야함)
		2.포인터는 주소 값을 저장하기 위해 별도의 메모리 공간을 소모,레퍼런스는 같은 메모리 공간을 참조하므로 메모리공간 소모X

		포인터 사용 시(call by address) 매개변수를 포인터로 주고 함수 호출 시 주소를 전달한다.
		그러면 함수에선 전달 받은 주소를 통해 주소가 가리키는 메모리 공간에 가서 값을 수정하거나 읽을 수 있게 된다.
		이것도 사실 단순한 (주소)값의 복사이기 때문에 주소가 가리키는 공간에 접근할 수 있는 것 뿐이지
		더블포인터를 쓰지 않는 이상 포인터가 가리키는 대상(주소) 자체를 변경할 순 없다.

		레퍼런스로 전달 시(call by reference) 다음과 같이 매개변수를 참조형 변수로 전달한다.
		고로 매개 변수에 있는 &(ampersand) 연산자는 변수의 주소값을 얻을 때 사용하는 & 연산자와 다르다.
		레퍼런스 형태로 변수를 받게 되면 매개변수 ref를 통해 Temperature 값(원본)에 접근할 수 있게 된다.

		포인터 변수와 가리키는 대상의 주소값은 같더라도 포인터 변수의 주소값과 대상의 주소값은 다르다.(별도의 메모리 공간을 소모)
		하지만 레퍼런스는 동일하다.(같은 메모리 공간을 참조하므로 메모리 공간을 소모하지 않음.)	
		*/

	// 깨달은 것
	// 포인터와 레퍼런스라는 개념이 비슷하긴하지만, 차이점이 헷갈렸었는데
	// 어떻게 차이가 나는지, 레퍼런스가 왜 나왔는지 알게 되었고
	// 검색한 내용들로부터 예시, 내용을 직접 정리하고 작성하니 개념과 사용 예시 등 명확히 알게 되는 것 같다. 
}